#include "pch.h"
#include "defs.h"
#include "protos.h"

// FROM CRAFTY!
/* const uint64_t rook_magic[SQ_NUMBER] = 
{
	C64(0x0080001020400080), C64(0x0040001000200040), C64(0x0080081000200080), C64(0x0080040800100080),
	C64(0x0080020400080080), C64(0x0080010200040080), C64(0x0080008001000200), C64(0x0080002040800100),
	C64(0x0000800020400080), C64(0x0000400020005000), C64(0x0000801000200080), C64(0x0000800800100080),
	C64(0x0000800400080080), C64(0x0000800200040080), C64(0x0000800100020080), C64(0x0000800040800100),
	C64(0x0000208000400080), C64(0x0000404000201000), C64(0x0000808010002000), C64(0x0000808008001000),
	C64(0x0000808004000800), C64(0x0000808002000400), C64(0x0000010100020004), C64(0x0000020000408104),
	C64(0x0000208080004000), C64(0x0000200040005000), C64(0x0000100080200080), C64(0x0000080080100080),
	C64(0x0000040080080080), C64(0x0000020080040080), C64(0x0000010080800200), C64(0x0000800080004100),
	C64(0x0000204000800080), C64(0x0000200040401000), C64(0x0000100080802000), C64(0x0000080080801000),
	C64(0x0000040080800800), C64(0x0000020080800400), C64(0x0000020001010004), C64(0x0000800040800100),
	C64(0x0000204000808000), C64(0x0000200040008080), C64(0x0000100020008080), C64(0x0000080010008080),
	C64(0x0000040008008080), C64(0x0000020004008080), C64(0x0000010002008080), C64(0x0000004081020004),
	C64(0x0000204000800080), C64(0x0000200040008080), C64(0x0000100020008080), C64(0x0000080010008080),
	C64(0x0000040008008080), C64(0x0000020004008080), C64(0x0000800100020080), C64(0x0000800041000080),
	C64(0x00FFFCDDFCED714A), C64(0x007FFCDDFCED714A), C64(0x003FFFCDFFD88096), C64(0x0000040810002101),
	C64(0x0001000204080011), C64(0x0001000204000801), C64(0x0001000082000401), C64(0x0001FFFAABFAD1A2)
}; */


const Bitboard MAGIC_BISHOP[64] = {
	0x010a0a1023020080L, 0x0050100083024000L, 0x8826083200800802L,
	0x0102408100002400L, 0x0414242008000000L, 0x0414242008000000L,
	0x0804230108200880L, 0x0088840101012000L, 0x0400420202041100L,
	0x0400420202041100L, 0x1100300082084211L, 0x0000124081000000L,
	0x0405040308000411L, 0x01000110089c1008L, 0x0030108805101224L,
	0x0010808041101000L, 0x2410002102020800L, 0x0010202004098180L,
	0x1104000808001010L, 0x274802008a044000L, 0x1400884400a00000L,
	0x0082000048260804L, 0x4004840500882043L, 0x0081001040680440L,
	0x4282180040080888L, 0x0044200002080108L, 0x2404c80a04002400L,
	0x2020808028020002L, 0x0129010050304000L, 0x0008020108430092L,
	0x005600450c884800L, 0x005600450c884800L, 0x001004501c200301L,
	0xa408025880100100L, 0x1042080300060a00L, 0x4100a00801110050L,
	0x11240100c40c0040L, 0x24a0281141188040L, 0x08100c4081030880L,
	0x020c310201002088L, 0x006401884600c280L, 0x1204028210809888L,
	0x8000a01402005002L, 0x041d8a021a000400L, 0x041d8a021a000400L,
	0x000201a102004102L, 0x0408010842041282L, 0x000201a102004102L,
	0x0804230108200880L, 0x0804230108200880L, 0x8001010402090010L,
	0x0008000042020080L, 0x4200012002440000L, 0x80084010228880a0L,
	0x4244049014052040L, 0x0050100083024000L, 0x0088840101012000L,
	0x0010808041101000L, 0x1090c00110511001L, 0x2124000208420208L,
	0x0800102118030400L, 0x0010202120024080L, 0x00024a4208221410L,
	0x010a0a1023020080L
};

const Bitboard MAGIC_ROOK[64] = {
	0x0080004000608010L, 0x2240100040012002L, 0x008008a000841000L,
	0x0100204900500004L, 0x020008200200100cL, 0x40800c0080020003L,
	0x0080018002000100L, 0x4200042040820d04L, 0x10208008a8400480L,
	0x4064402010024000L, 0x2181002000c10212L, 0x5101000850002100L,
	0x0010800400080081L, 0x0012000200300815L, 0x060200080e002401L,
	0x4282000420944201L, 0x1040208000400091L, 0x0010004040002008L,
	0x0082020020804011L, 0x0005420010220208L, 0x8010510018010004L,
	0x05050100088a1400L, 0x0009008080020001L, 0x2001060000408c01L,
	0x0060400280008024L, 0x9810401180200382L, 0x0200201200420080L,
	0x0280300100210048L, 0x0000080080800400L, 0x0002010200081004L,
	0x8089000900040200L, 0x0040008200340047L, 0x0400884010800061L,
	0xc202401000402000L, 0x0800401301002004L, 0x4c43502042000a00L,
	0x0004a80082800400L, 0xd804040080800200L, 0x060200080e002401L,
	0x0203216082000104L, 0x0000804000308000L, 0x004008100020a000L,
	0x1001208042020012L, 0x0400220088420010L, 0x8010510018010004L,
	0x8009000214010048L, 0x6445006200130004L, 0x000a008402460003L,
	0x0080044014200240L, 0x0040012182411500L, 0x0003102001430100L,
	0x4c43502042000a00L, 0x1008000400288080L, 0x0806003008040200L,
	0x4200020801304400L, 0x8100640912804a00L, 0x300300a043168001L,
	0x0106610218400081L, 0x008200c008108022L, 0x0201041861017001L,
	0x00020010200884e2L, 0x0205000e18440001L, 0x202008104a08810cL,
	0x800a208440230402L
};

const ushort SHIFT_BISHOP[64] = {
	58, 59, 59, 59, 59, 59, 59, 58,
	59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 57, 57, 57, 57, 59, 59,
	59, 59, 57, 55, 55, 57, 59, 59,
	59, 59, 57, 55, 55, 57, 59, 59,
	59, 59, 57, 57, 57, 57, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59,
	58, 59, 59, 59, 59, 59, 59, 58
};

const ushort SHIFT_ROOK[64] = {
	52, 53, 53, 53, 53, 53, 53, 52,
	53, 54, 54, 54, 54, 54, 54, 53,
	53, 54, 54, 54, 54, 54, 54, 53,
	53, 54, 54, 54, 54, 54, 54, 53,
	53, 54, 54, 54, 54, 54, 54, 53,
	53, 54, 54, 54, 54, 54, 54, 53,
	53, 54, 54, 54, 54, 54, 54, 53,
	52, 53, 53, 53, 53, 53, 53, 52,
};



Bitboard rook_table[SQ_NUMBER][1 << ROOK_INDEX_BITS]{};

const Bitboard rook_attack (Square const &square, Bitboard blockers)
{
	return rook_table[square][((blockers&rook_mask[square]) * MAGIC_ROOK[square]) >> SHIFT_ROOK[square]];
}

void init_rook()
{
	for (ushort square = A1; square <= H8; square++) {

		Bitboard blockerboard[1 << ROOK_INDEX_BITS]{}, tmp_rook;
		ushort bits = popcount(rook_mask[square]);

		for (int i = 0; i < ( 1 << bits); i++) {
			blockerboard[i] = gen_blockerboard(i, bits, rook_mask[square]);
			tmp_rook = gen_r_attks(square, blockerboard[i]);
			int index = ((blockerboard[i] & rook_mask[square]) * MAGIC_ROOK[square]) >> SHIFT_ROOK[square];
			rook_table[square][index] = tmp_rook;
		}
	}
}

const Bitboard gen_blockerboard(int index, ushort bits, Bitboard b)
{
	int i, j;
	Bitboard result = 0ULL;
	for (i = 0; i < bits; i++) {
		j = bitscan_reset(b);
		if (index & (1 << i)) result |= (1ULL << j);
	}
	return result;
}

const Bitboard gen_r_attks(ushort square, Bitboard blockerboard){
	Bitboard result = 0ULL;
	int rank, file;
	
	for (rank = RANK_INDEX + 1; rank <= 7; rank++) {
		result |= (1ULL << (FILE_INDEX + rank * 8));
		if (blockerboard & (1ULL << (FILE_INDEX + rank * 8))) break;
	}
	
	for (rank = RANK_INDEX - 1; rank >= 0; rank--) {
		result |= (1ULL << (FILE_INDEX + rank * 8));
		if (blockerboard & (1ULL << (FILE_INDEX + rank * 8))) break;
	}
	
	for (file = FILE_INDEX + 1; file <= 7; file++) {
		result |= (1ULL << (file + RANK_INDEX * 8));
		if (blockerboard & (1ULL << (file + RANK_INDEX * 8))) break;
	}
	
	for (file = FILE_INDEX - 1; file >= 0; file--) {
		result |= (1ULL << (file + RANK_INDEX * 8));
		if (blockerboard & (1ULL << (file + RANK_INDEX * 8))) break;
	}
	
	return result;
}